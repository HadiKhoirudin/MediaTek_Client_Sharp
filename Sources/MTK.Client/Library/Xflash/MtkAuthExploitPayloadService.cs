using System;
using System.IO;

namespace mtkclient.library.xflash
{
    internal class MtkAuthExploitPayloadService
    {
        private static uint Read32(MemoryStream stream)
        {
            byte[] array = new byte[4];
            stream.Read(array, 0, array.Length);
            return BitConverter.ToUInt32(array, 0);
        }

        public static byte[] Prepare(uint wdgAddress, uint uartAddress, byte[] payload)
        {
            int num = payload.Length - 4;
            int num2 = payload.Length - 8;
            using (MemoryStream memoryStream = new MemoryStream())
            {
                memoryStream.Write(payload, 0, payload.Length);
                memoryStream.Seek(num, SeekOrigin.Begin);
                if (Read32(memoryStream) == 268464128)
                {
                    memoryStream.Seek(num, SeekOrigin.Begin);
                    byte[] bytes = BitConverter.GetBytes(wdgAddress);
                    memoryStream.Write(bytes, 0, bytes.Length);
                }
                memoryStream.Seek(num2, SeekOrigin.Begin);
                if (Read32(memoryStream) == 285220864)
                {
                    memoryStream.Seek(num2, SeekOrigin.Begin);
                    byte[] bytes2 = BitConverter.GetBytes(uartAddress);
                    memoryStream.Write(bytes2, 0, bytes2.Length);
                }
                memoryStream.Seek(0L, SeekOrigin.End);
                while (memoryStream.Length % 4L != 0L)
                {
                    memoryStream.Write(new byte[1], 0, 1);
                }
                if (memoryStream.Length >= 2560L)
                {
                    throw new ArgumentException("Payload too large");
                }
                return memoryStream.ToArray();
            }
        }
    }
}
