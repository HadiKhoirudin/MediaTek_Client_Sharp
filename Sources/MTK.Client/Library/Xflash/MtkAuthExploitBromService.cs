using System;
using System.Threading;
using System.Threading.Tasks;

namespace mtkclient.library.xflash
{
    internal class MtkAuthExploitBromService
    {
        public static async Task<byte[]> RegisterAsync(
            IMtkDevice device,
            uint address,
            int length,
            bool check,
            CancellationToken cancellationToken
        )
        {
            Console.WriteLine("Sending 0xDA");
            await device.EchoAsync(218, cancellationToken);
            Console.WriteLine("Sending mode: 0");
            await device.EchoAsync(BitConverter.GetBytes(0), cancellationToken);
            Console.WriteLine("Sending address: 0x{0:X8}", address);
            byte[] bytes = BitConverter.GetBytes(address);
            Array.Reverse(bytes);
            await device.EchoAsync(bytes, cancellationToken);
            Console.WriteLine("Sending length: {0}", length);
            byte[] bytes2 = BitConverter.GetBytes(length);
            Array.Reverse(bytes2);
            await device.EchoAsync(bytes2, cancellationToken);
            Console.WriteLine("Reading status");
            ushort num = await device.ReadWordAsync(little: true, cancellationToken);
            if (num == 0)
            {
                Console.WriteLine("Reading data");
                byte[] dataBuff = new byte[length];
                await device.ReadExactAsync(dataBuff, 0, dataBuff.Length, cancellationToken);
                if (check)
                {
                    Console.WriteLine("Reading data status");
                    num = await device.ReadWordAsync(little: true, cancellationToken);
                    if (num != 0)
                    {
                        Console.WriteLine($"Invalid brom register data status: 0x{num:X4}");
                    }
                }
                return dataBuff;
            }
            Console.WriteLine($"Invalid brom register status: 0x{num:X4}");
            return new byte[0];
        }

        public static async Task RegisterAsync(
            IMtkDevice device,
            uint address,
            int length,
            byte[] data,
            bool check,
            CancellationToken cancellationToken
        )
        {
            Console.WriteLine("Sending 0xDA");
            await device.EchoAsync(218, cancellationToken);
            Console.WriteLine("Sending mode: 1");
            byte[] bytes = BitConverter.GetBytes(1);
            Array.Reverse(bytes);
            await device.EchoAsync(bytes, cancellationToken);
            Console.WriteLine("Sending address: 0x{0:X8}", address);
            byte[] bytes2 = BitConverter.GetBytes(address);
            Array.Reverse(bytes2);
            await device.EchoAsync(bytes2, cancellationToken);
            Console.WriteLine("Sending length: {0}", length);
            byte[] bytes3 = BitConverter.GetBytes(length);
            Array.Reverse(bytes3);
            await device.EchoAsync(bytes3, cancellationToken);
            Console.WriteLine("Reading status");
            ushort num = await device.ReadWordAsync(little: true, cancellationToken);
            if (num == 0)
            {
                Console.WriteLine("Sending data");
                await device.WriteAsync(data, 0, length, cancellationToken);
                if (check)
                {
                    Console.WriteLine("Reading data status");
                    num = await device.ReadWordAsync(little: true, cancellationToken);
                    if (num != 0)
                    {
                        Console.WriteLine($"Invalid brom register data status: 0x{num:X4}");
                    }
                }
                return;
            }
            Console.WriteLine($"Invalid brom register status: 0x{num:X4}");
        }
    }
}
